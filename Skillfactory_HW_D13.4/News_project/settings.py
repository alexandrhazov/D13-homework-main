"""
Django settings for newsProject project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ba$qqoe*+i&=u$-$!(lva-)mo4657pto!hr9#)h8mwin9izy8x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news_portal',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    "django_apscheduler",
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'newsProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'newsProject.wsgi.application'

# Этого раздела может не быть, добавьте его в указанном виде.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Vladivostok'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [ BASE_DIR / 'static' ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'


LOGOUT_REDIRECT_URL = "/Postnews"
LOGIN_REDIRECT_URL = "/Postnews"

ACCOUNT_FORMS = {"signup": "news_portal.forms.CustomSignupForm"}
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.mail.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "gennadii_s@inbox.ru"
EMAIL_HOST_PASSWORD = "****************"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "gennadii_s@inbox.ru"

SERVER_EMAIL = "gennadii_s@inbox.ru"

ADMINS = (
    ('Gennadii', 'gennadii_s@inbox.ru'),
)

EMAIL_SUBJECT_PREFIX = 'Новостной портал!'


CELERY_BROKER_URL = 'redis://default:3Hr9PVS6MI5vepq2xYHNnZ2RbDFjjwIl@redis-19182.c267.us-east-1-4.ec2.cloud.redislabs.com:19182'
CELERY_RESULT_BACKEND = 'redis://default:3Hr9PVS6MI5vepq2xYHNnZ2RbDFjjwIl@redis-19182.c267.us-east-1-4.ec2.cloud.redislabs.com:19182'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        # Фильтр для вывода сообщений в консоль только при DEBUG = True
        'console_debug_filter': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # Фильтр для записи в файл и отправки на почту только при DEBUG = False
        'file_mail_general_filter': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'formatters': {
        # Формат для сообщений с дополнительной информацией уровня INFO
        'verbose': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        # Формат для сообщений с дополнительной информацией уровня ERROR
        'verbose_ERORR': {
            'format': '{asctime} {levelname} {module} {message} {pathname} {exc_info}',
            'style': '{',
        },
        # Формат для сообщений отправляемых на почту
        'verbose_mail': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        # Обработчик для вывода сообщений в консоль
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'verbose_ERORR',
            'filters': ['console_debug_filter'],
        },

        # Обработчик для записи сообщений уровня INFO и выше в файл general.log
        'general_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'general.log'),
            'level': 'INFO',
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # Максимальный размер файла (1MB)
            'backupCount': 5,  # Количество ротаций файлов
            'filters': ['file_mail_general_filter'],
        },

        # Обработчик для записи сообщений уровня ERROR и выше в файл errors.log
        'errors_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'errors.log'),
            'level': 'ERROR',
            'formatter': 'verbose_ERORR',
            'maxBytes': 1024 * 1024,  # Максимальный размер файла (1MB)
            'backupCount': 5,  # Количество ротаций файлов
            #'exc_info': True,  # Включение вывода стека ошибки
        },

        # Обработчик для записи сообщений связанных с безопасностью в файл security.log
        'security_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'level': 'INFO',
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # Максимальный размер файла (1MB)
            'backupCount': 5,  # Количество ротаций файлов
        },

        # Обработчик для отправки сообщений уровня ERROR и выше на почту
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'formatter': 'verbose_mail',
            'filters': ['file_mail_general_filter'],
        }
    },
    'loggers': {
        # Основной логгер django
        'django': {
            'handlers': ['console', 'general_file', 'errors_file', 'security_file', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': True,
        },
        # Логгер для django.request
        'django.request': {
            'handlers': ['console', 'errors_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер для django.server
        'django.server': {
            'handlers': ['console', 'errors_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер для django.template
        'django.template': {
            'handlers': ['console', 'errors_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер для django.db.backends
        'django.db.backends': {
            'handlers': ['console', 'errors_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Логгер для django.security
        'django.security': {
            'handlers': ['console', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}





